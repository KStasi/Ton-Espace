;; Exchange Contract
(cell, int) idict_add_ref?(cell dict, int key_len, int index, cell value) asm(value index dict key_len) "DICTIADDREF";

(cell) load_data() {
  return get_data().begin_parse().preload_dict();
}

(int, int, int, int, int) getoffer(int contr_wc, int contr_addr) method_id {
  cell offers = load_data();
  if (offers.null?()) {
      return (-1, -1, -1, -1, -1);
  }
  cell offer = idict_get_ref(offers, 256, contr_addr);
  if (offer.null?()) {
      return (-1, -1, -1, -1, -1);
  }
  slice offer_entry = offer.begin_parse();
  return (offer_entry~load_int(8), offer_entry~load_uint(256), offer_entry~load_int(8), offer_entry~load_uint(256), offer_entry~load_grams()); 
}

() store_offer(int sender_wc, int sender_addr, int contr_wc, int contr_addr, int price) impure {
  cell offers = load_data();
  if (offers.null?()) {
      offers = new_dict();
  }
  cell value = begin_cell()
      .store_int(contr_wc, 8)
      .store_uint(contr_addr, 256)
      .store_int(sender_wc, 8)
      .store_uint(sender_addr, 256)
      .store_grams(price)
      .end_cell();
  var (updated_offers, s) = offers.idict_add_ref?(256, contr_addr, value);
  throw_unless(88, s);
  set_data(begin_cell()
    .store_dict(updated_offers)
    .end_cell());

}


() buy(int sender_wc, int sender_addr, int cont_wc, int cont_addr, int msg_value) impure {
  var (contr_wc, contr_addr, owner_wc, owner_addr, price) = getoffer(cont_wc, cont_addr);
  throw_if(79, price == -1);
  throw_unless(80, price <= msg_value);
  var (updated_offers, s) = load_data().idict_delete?(256, contr_addr);
  throw_unless(88, s);
  set_data(begin_cell()
    .store_dict(updated_offers)
    .end_cell());
  
  var msg = begin_cell()
    .store_uint(0xc4ff, 17)
    .store_int(contr_wc, 8)
    .store_uint(contr_addr, 256)
    .store_grams(1 << 27)
    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .store_uint(0xaaeeee, 32)
    .store_uint(0, 64)
    .store_int(sender_wc, 8)
    .store_uint(sender_addr, 256);
  
  send_raw_message(msg.end_cell(), 0);

  var msg = begin_cell()
    .store_uint(0xc4ff, 17)
    .store_int(owner_wc, 8)
    .store_uint(owner_wc, 256)
    .store_grams(0)
    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1);
  
  return send_raw_message(msg.end_cell(), 64);
}

() claim_token(int sender_wc, int sender_addr, int contr_wc, int contr_addr) impure {
  var (contr_wc, contr_addr, owner_wc, owner_addr, price) = getoffer(contr_wc, contr_addr);
  throw_unless(91, (owner_wc == sender_wc) & (owner_addr == sender_addr));
  var (updated_offers, s) = load_data().idict_delete?(256, contr_addr);
  throw_unless(88, s);
  set_data(begin_cell()
    .store_dict(updated_offers)
    .end_cell());
  
  var msg = begin_cell()
    .store_uint(0xc4ff, 17)
    .store_int(contr_wc, 8)
    .store_uint(contr_addr, 256)
    .store_grams(1 << 27)
    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .store_uint(0xaaeeee, 32)
    .store_uint(0, 64)
    .store_int(sender_wc, 8)
    .store_uint(sender_addr, 256);
 return  send_raw_message(msg.end_cell(), 64);
}

() recv_external(slice in_msg) impure {
  slice ds = get_data().begin_parse();
  var (init, offers) = (ds~load_int(1), ds~load_dict());
  ifnot(init) {
    accept_message();
    set_data(begin_cell()
      .store_dict(offers)
      .end_cell());
  }
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
  var cs = in_msg_cell.begin_parse();
  var flags = cs~load_uint(4); 
  if (flags & 1) {
    return ();
  }
  var s_addr = cs~load_msg_addr();
  if (in_msg.slice_empty?()) {
    return ();
  }
  int op = in_msg~load_uint(32);
  if (op == 0) {
    return ();
  }
  int query_id = in_msg~load_uint(64);
  var (contr_wc, contr_addr) = (in_msg~load_int(8), in_msg~load_uint(256));
  var (sender_wc, sender_addr) = (s_addr~load_int(8), s_addr~load_uint(256));
  if (op == 0xaaeeee) {
    int price = in_msg~load_grams();
    return store_offer(sender_wc, sender_addr, contr_wc, contr_addr, price);
  }
  if (op == 0xaaeeff) {
    return buy(sender_wc, sender_addr, contr_wc, contr_addr, msg_value);
  }
   if (op == 0xaaee99) {
    return claim_token(sender_wc, sender_addr, contr_wc, contr_addr);
  }
  return ();
}

